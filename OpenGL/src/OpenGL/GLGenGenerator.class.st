Class {
	#name : #GLGenGenerator,
	#superclass : #Object,
	#instVars : [
		'generatedMethods'
	],
	#category : #'OpenGL-Generation'
}

{
	#category : #helpers,
	#'squeak_changestamp' : 'stlu 4/12/2021 17:35'
}
GLGenGenerator >> compile: sourceString classified: categorySymbol into: aClass [

	| selector previousSource |
	selector := Parser new parseSelector: sourceString.
	generatedMethods add: (MethodReference class: aClass selector: selector).
	
	previousSource := (aClass sourceCodeAt: selector ifAbsent: []) asString.
	sourceString = previousSource ifTrue: [
		aClass organization classify: selector under: categorySymbol logged: false.
		^ self].
	
	aClass compile: sourceString classified: categorySymbol
]

{
	#category : #initialization,
	#'squeak_changestamp' : 'stlu 4/12/2021 17:43'
}
GLGenGenerator >> initialize [

	generatedMethods := Set new.
]

{
	#category : #helpers,
	#'squeak_changestamp' : 'stlu 4/12/2021 17:03'
}
GLGenGenerator >> removeGeneratedMethodsIn: aClass [

	(Pragma allNamed: #generated in: aClass) do: [:pragma |
		aClass removeSelector: pragma method selector]
]

{
	#category : #helpers,
	#'squeak_changestamp' : 'stlu 4/12/2021 17:43'
}
GLGenGenerator >> removeNonGeneratedMethodsIn: aClass [
	"Remove methods in target class that were not generated by this generator."
	aClass selectors do: [:selector |
		| reference |
		reference := MethodReference class: aClass selector: selector.
		(generatedMethods includes: reference) ifFalse: [
			aClass removeSelector: selector]]
]
