"
I decorate a GLLibrary to automatically check for errors after every API call.

Whenever an API call to OpenGL fails, OpenGL internally sets a flag to denote the kind of error that occurred. To retrieve this flag, users need to manually call the `glGetError` function. Since users (understandably) balk at interspersing this error check after every API call, errors can and frequently do happen without the calling code noticing anything wrong.

Instead of leaving error checking to user code, I ensure a call to `glGetError` after very API call.
Great for debugging and general sanity. Buy now.

---

Note: Since I essentially double the amount of FFI calls being made, performance can in certain use cases be diminished significantly.
"
Class {
	#name : #GLErrorCheckingLibrary,
	#superclass : #GLLibrary,
	#instVars : [
		'library'
	],
	#category : #'OpenGL-API',
	#commentStamp : 'stlu 4/14/2021 15:16'
}

{
	#category : #'instance creation',
	#timestamp : 'stlu 4/17/2021 10:29'
}
GLErrorCheckingLibrary class >> around: aLibrary [

	^ self new
		library: aLibrary;
		context: aLibrary context;
		yourself
]

{
	#category : #'error handling',
	#timestamp : 'stlu 4/16/2021 14:56'
}
GLErrorCheckingLibrary >> doesNotUnderstand: aMessage [

	(self install: aMessage selector) ifNotNil: [
		^ aMessage sendTo: self].
	
	^ super doesNotUnderstand: aMessage
]

{
	#category : #'error handling',
	#timestamp : 'stlu 4/16/2021 15:25'
}
GLErrorCheckingLibrary >> errorCheckingTemplate [

	^ '{1}

	| result |
	result := library {1}.
	library checkForError.
	^ result'
]

{
	#category : #'error handling',
	#timestamp : 'stlu 4/16/2021 15:32'
}
GLErrorCheckingLibrary >> getError [
	"Manual passtrhough. Do not check the error checking for errors."
	^ library getError
]

{
	#category : #'error handling',
	#timestamp : 'stlu 4/16/2021 15:24'
}
GLErrorCheckingLibrary >> install: aSelector [

	| registryMethod signature template source |
	registryMethod := GLRegistry compiledMethodAt: aSelector ifAbsent: [^ nil].
	"assumption: method signature is on a single line ended by a carriage return."
	signature := registryMethod getSource asString copyUpTo: Character cr.
	template := (registryMethod pragmaAt: #glCommand:)
					ifNil: [self passthroughTemplate]
					ifNotNil: [self errorCheckingTemplate].
	source := template format: { signature }.
	^ self class compile: source classified: #'*autogenerated'
]

{
	#category : #accessing,
	#timestamp : 'stlu 4/15/2021 22:23'
}
GLErrorCheckingLibrary >> library [

	^ library
]

{
	#category : #accessing,
	#timestamp : 'stlu 4/17/2021 10:29'
}
GLErrorCheckingLibrary >> library: aLibrary [

	library := aLibrary
]

{
	#category : #'error handling',
	#timestamp : 'stlu 4/16/2021 15:20'
}
GLErrorCheckingLibrary >> passthroughTemplate [

	^ '{1}

	^ library {1}'
]
